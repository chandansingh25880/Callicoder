'use strict';const Note=require("../models/note.model.js");exports.create=(d,e)=>{exports.create=(a,b)=>{if(!a.body.content)return b.status(400).send({message:"Note content can not be empty"});(new Note({title:a.body.title||"Untitled Note",content:a.body.content})).save().then(c=>{b.send(c)}).catch(c=>{b.status(500).send({message:c.message||"Some error occurred while creating the Note."})})}};
exports.findAll=(d,e)=>{exports.findAll=(a,b)=>{Note.find().then(c=>{b.send(c)}).catch(c=>{b.status(500).send({message:c.message||"Some error occurred while retrieving notes."})})}};
exports.findOne=(d,e)=>{exports.findOne=(a,b)=>{Note.findById(a.params.noteId).then(c=>{if(!c)return b.status(404).send({message:"Note not found with id "+a.params.noteId});b.send(c)}).catch(c=>"ObjectId"===c.kind?b.status(404).send({message:"Note not found with id "+a.params.noteId}):b.status(500).send({message:"Error retrieving note with id "+a.params.noteId}))}};
exports.update=(d,e)=>{exports.update=(a,b)=>{if(!a.body.content)return b.status(400).send({message:"Note content can not be empty"});Note.findByIdAndUpdate(a.params.noteId,{title:a.body.title||"Untitled Note",content:a.body.content},{new:!0}).then(c=>{if(!c)return b.status(404).send({message:"Note not found with id "+a.params.noteId});b.send(c)}).catch(c=>"ObjectId"===c.kind?b.status(404).send({message:"Note not found with id "+a.params.noteId}):b.status(500).send({message:"Error updating note with id "+
a.params.noteId}))}};exports.delete=(d,e)=>{exports.delete=(a,b)=>{Note.findByIdAndRemove(a.params.noteId).then(c=>{if(!c)return b.status(404).send({message:"Note not found with id "+a.params.noteId});b.send({message:"Note deleted successfully!"})}).catch(c=>"ObjectId"===c.kind||"NotFound"===c.name?b.status(404).send({message:"Note not found with id "+a.params.noteId}):b.status(500).send({message:"Could not delete note with id "+a.params.noteId}))}};